%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - sea
scope: text.html.seagull
variables:
  block_opening: "({)"
  block_closing: "(})"
  variable: "([a-zA-Z_]+)"
  property: "([a-zA-Z_](?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)*)"
  function: "([a-zA-Z_]+)"
  piping: "\\|"
version: 2
contexts:
  main:
    - include: scope:text.html.basic
    - include: if_conditional
    - include: unless_conditional
    - include: each
    - include: placeholder
    - include: placeholder_with_double_quoted_strings
    - include: placeholder_with_single_quoted_strings

  piping:
    - match: "{{function}}"
      scope: support.function.seagull
      pop: true

  # Placeholder variables ######################################################
  # {name}
  # {name | func}
  # {name | func | func | func | func}
  placeholder:
    - match: "{{block_opening}}{{property}}"
      captures:
        1: entity.name.tag.seagull
        2: variable.other.seagull
      push: placeholder_inner

  placeholder_inner:
    - match: "{{piping}}"
      scope: keyword.operator.bitwise.seagull
      push: piping
    - match: "{{block_closing}}"
      scope: entity.name.tag.seagull
      pop: true

  # Placeholder with double quoted strings #####################################
  # {"hello"}
  # {"hello" | func}
  # {"hello" | func | func | func | func}
  placeholder_with_double_quoted_strings:
    - match: '{{block_opening}}(")'
      captures:
        1: entity.name.tag.seagull
        2:
          punctuation.definition.string.begin.seagull
          string.quoted.double.seagull
      push: double_quoted_string
    - match: "{{piping}}"
      scope: keyword.operator.bitwise.seagull
      push: piping
    - match: "{{block_closing}}"
      scope: entity.name.tag.seagull

  double_quoted_string:
    - meta_scope: string.quoted.double.seagull
    - match: '"'
      scope: punctuation.definition.string.end.seagull
      pop: true

  # Placeholder with single quoted strings #####################################
  placeholder_with_single_quoted_strings:
    - match: "{{block_opening}}(')"
      captures:
        1: entity.name.tag.seagull
        2:
          punctuation.definition.string.begin.seagull
          string.quoted.single.seagull
      push: single_quoted_string
    - match: "{{piping}}"
      scope: keyword.operator.bitwise.seagull
      push: piping
    - match: "{{block_closing}}"
      scope: entity.name.tag.seagull

  single_quoted_string:
    - meta_scope: string.quoted.single.seagull
    - match: "'"
      scope: punctuation.definition.string.end.seagull
      pop: true

  # Each block #################################################################
  # {each person in people}{/each}
  # {each person, index in people}{/each}
  # {each key => value in dict}{/each}
  # {each key => value, index in dict}{/each}
  each:
    - match:
        "{{block_opening}}(each) +{{variable}}(?: *(=>) *{{variable}})?(?: *,
        *{{variable}})? +(in) +{{property}}{{block_closing}}"
      captures:
        1: entity.name.tag.seagull
        2: keyword.control.loop.for.seagull
        3: variable.other.seagull
        4: punctuation.separator.key-value.seagull
        5: variable.other.seagull
        6: variable.other.seagull
        7: keyword.operator.seagull
        8: variable.other.seagull
        9: entity.name.tag.seagull
      push: each_inner

  each_inner:
    - include: main
    - match: "{{block_opening}}(/each){{block_closing}}"
      captures:
        1: entity.name.tag.seagull
        2: keyword.control.loop.for.seagull
        3: entity.name.tag.seagull
      pop: true

  # If block ###################################################################
  # {if condition}{/if}
  # {if condition | func}{/if}
  # {if condition | func | func | func | func}{/if}
  if_conditional:
    - match: "{{block_opening}}(if) +{{property}}"
      captures:
        1: entity.name.tag.seagull
        2: keyword.control.conditional.if.seagull
        3: variable.other.seagull
      push: if_inner

  if_inner:
    - match: "{{piping}}"
      scope: keyword.operator.bitwise.seagull
      push: piping
    - match: "{{block_closing}}"
    - include: main
    - match: "{{block_opening}}(/if){{block_closing}}"
      captures:
        1: entity.name.tag.seagull
        2: keyword.control.conditional.end.seagull
        3: entity.name.tag.seagull
      pop: true

  # Unless block ###############################################################
  # {unless condition}{/unless}
  # {unless condition | func}{/unless}
  # {unless condition | func | func | func | func}{/unless}
  unless_conditional:
    - match: "{{block_opening}}(unless) +{{property}}"
      captures:
        1: entity.name.tag.seagull
        2: keyword.control.conditional.unless.seagull
        3: variable.other.seagull
      push: unless_inner

  unless_inner:
    - match: "{{piping}}"
      scope: keyword.operator.bitwise.seagull
      push: piping
    - match: "{{block_closing}}"
    - include: main
    - match: "{{block_opening}}(/unless){{block_closing}}"
      captures:
        1: entity.name.tag.seagull
        2: keyword.control.conditional.end.seagull
        3: entity.name.tag.seagull
      pop: true
